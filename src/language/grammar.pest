WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!"\n" ~ ANY)* ~ ("\n"|EOI))  }


zero = _{ "0" }
nonZero = _{'1' .. '9'}
digit = _{(zero | nonZero)*}
plus = _{"+"}
minus = _{"-"}
plusminus = _{ plus | minus }
integer = @{ (plusminus? ~ nonZero ~ digit?) | zero}
float = @{plusminus? ~digit ~ "." ~ digit }
num = _{float | integer}
bools = {"true" | "false"}
primitives = { "add" | "sub" | "mult" | "div" | "and" | "or" | "eq" | "geq" | "leq" | "ge" | "le" | 
                "not" | "i2f" | "f2i" | "apply"
             }

lowercase = _{'a' .. 'z'}
uppercase = _{'A' .. 'Z'}
funName   = @{lowercase ~ (lowercase | uppercase | zero |nonZero | "_" )* }
varName   = @{"_" ~ lowercase ~ (lowercase | uppercase | zero |nonZero | "_" )*  }

takeVars = {"|" ~ varName+  ~"|" }
block = { "{" ~ atom* ~"}" }
take     = { takeVars ~ block}

whileCond = {"while" ~ atom+}
whileLoop  = {whileCond ~ block}

ifTrue = {"?" ~ block}
stack = { "[" ~ atom* ~ "]"}

dontCare = {"_"}
pattern = _{ varName | num | dontCare | bools  }
when = {"when" ~atom+}
matchArm = {atom*}
patterns = {pattern+}
matchElem = { patterns ~ (when)? ~ "=>" ~ matchArm}
matchBlock = { "match" ~ ("|" ~ matchElem ~ ",")+  }

atom = _{ 
 	num | bools |take | whileLoop | matchBlock | ifTrue | stack | primitives | funName | varName
}

insides = _{atom* }

def = {
funName ~ "=" ~ insides 
}

expr = {atom+ }

justDef = _{SOI ~ def ~ EOI}
justExpr = _{SOI ~ expr ~ EOI}
justExprOrDef = _{SOI ~ (def | expr) ~ EOI}
defsAndExprs = _{SOI ~ ((def | expr) ~ ";")* ~ EOI}



